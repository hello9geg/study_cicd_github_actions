name: study-workflow-run
on: 
  workflow_dispatch

# ================演示Job的依赖关系-开始=======================
# jobs:
#   test-code:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5
#       - name: install requirements
#         run: pip install -r requirements.txt
#       - name: run py test
#         run: pytest --cov-report html:htmlcov --cov-report term --cov=project test
#       - name: upload test reports
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-report
#           path: htmlcov/
  
#   deploy:
#     runs-on: ubuntu-latest
#     needs: test-code  #  表示test-code任务执行结束并且执行成功，deploy任务才会去执行
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5
#       - name: deploy code
#         run: echo "deploy........."
# ================演示Job的依赖关系-结束=======================


# ================演示Job的状态检查-开始=======================
# jobs:
#   test-code:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5
#       - name: install requirements
#         run: pip install -r requirements.txt
#       - name: run py test
#         run: pytest --cov-report html:htmlcov --cov-report term --cov=project test
#       - name: upload test reports
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-report
#           path: htmlcov/
  
#   deploy:
#     runs-on: ubuntu-latest
#     if: ${{ always() }} # 表示无论test-code是否执行完成和是否执行成功，当前Job都会执行
#     needs: test-code  #  表示test-code任务执行结束并且执行成功，deploy任务才会去执行
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5
#       - name: deploy code
#         run: echo "deploy........."
# ================演示Job的状态检查-结束=======================

# ================演示step的状态检查-开始=======================
# jobs:
#   test-code:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5
#       - name: install requirements
#         run: pip install -r requirements.txt
#       - name: run py test
#         run: pytest --cov-report html:htmlcov --cov-report term --cov=project test
#         id: run-py-test
#       - name: upload test reports
#         uses: actions/upload-artifact@v4
#         if: ${{ failure() }} # 表示：在当前job中，在当前step，任意一个之前step失败，都会执行当前step
#         with:
#           name: test-report
#           path: htmlcov/
# ================演示step的状态检查-结束=======================

# ================演示matrix的使用-开始=======================
# jobs:
#   test-code:
#     runs-on: ubuntu-latest
#     strategy: # matrix的核心配置节点
#       matrix: 
#         py-version: ['3.8','3.9','3.10']  # 定义matrix变量(定义多个python版本)
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5
#       - uses: actions/setup-python@v6  # 使用自定义版本的python版本
#         with:
#             python-version: ${{ matrix.py-version }} # 引用matrix变量
#       - name: install requirements
#         run: pip install -r requirements.txt
#       - name: run py test
#         run: pytest --cov-report html:htmlcov --cov-report term --cov=project test
#         id: run-py-test
#       - name: upload test reports
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-report-${{ matrix.py-version }}
#           path: htmlcov/
# ================演示matrix的使用-结束=======================

# ================演示matrix的使用(多层循环)-开始=======================
jobs:
  test-code:
    runs-on: ${{ matrix.os-version }}
    strategy: # matrix的核心配置节点
      matrix: 
        os-version: ['ubuntu-22.04','ubuntu-24.04'] # 定义matrix变量(定义多个OS版本), 外层循环是os-version，内层循环是py-version
        py-version: ['3.8','3.9','3.10']  # 定义matrix变量(定义多个python版本)
    steps:
      - name: checkout code
        uses: actions/checkout@v5
      - uses: actions/setup-python@v6  # 使用自定义版本的python版本
        with:
            python-version: ${{ matrix.py-version }} # 引用matrix变量
      - name: install requirements
        run: pip install -r requirements.txt
      - name: run py test
        run: pytest --cov-report html:htmlcov --cov-report term --cov=project test
        id: run-py-test
      - name: upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.os-version }}-${{ matrix.py-version }}
          path: htmlcov/
# ================演示matrix的使用(多层循环)-结束=======================
